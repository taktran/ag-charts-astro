---
import { getCollection } from "astro:content";
import fs from "node:fs/promises";
import path from "path";
import {
  isScriptFile,
  isStyleFile,
  getInternalFramework,
  getBoilerPlateFramework,
  getEntryFileName,
  getIsEnterprise,
  getDocExamplePages,
} from "../../../../utils/pages";
import JavascriptTemplate from "../../../../components/framework-templates/JavascriptTemplate.astro";
import ReactTemplate from "../../../../components/framework-templates/ReactTemplate.astro";
import ReactTemplateLegacy from "../../../../components/framework-templates/ReactTemplateLegacy";

const { framework, page, exampleName } = Astro.params;

// TODO: Create framework selector
const useFunctionalReact = false;
const useVue3 = false;
const useTypescript = false;

const internalFramework = getInternalFramework({
  framework,
  useFunctionalReact,
  useVue3,
  useTypescript,
});

const importType = "packages";
const library = "charts";
const type = "generated";

const publicRoot = "../../../../../public";
const exampleFolder = path.join(
  "examples",
  page,
  exampleName,
  importType,
  internalFramework
);
const exampleFolderPath = path.join(publicRoot, exampleFolder);
const exampleFolderBaseUrl = path.join("/", exampleFolder);

export async function getStaticPaths() {
  const pages = await getCollection("docs");
  const examples = await getDocExamplePages({
    pages,
  });
  return examples;
}

const isDev = import.meta.env.DEV;

const indexHtmlFile = path.join(exampleFolderPath, "index.html");
const indexHtmlPathUrl = new URL(indexHtmlFile, import.meta.url);
const indexHtml = await fs.readFile(indexHtmlPathUrl, "utf-8").catch(() => {});

const entryFileName = getEntryFileName({
  framework,
  internalFramework,
});
const entryFilePath = path.join(exampleFolderPath, entryFileName);
const entryFileUrl = new URL(entryFilePath, import.meta.url);
const entryFile = await fs.readFile(entryFileUrl, "utf-8").catch(() => {});
const entryFileWebUrl = path.join("/", exampleFolder, entryFileName);

const isEnterprise = getIsEnterprise({
  framework,
  internalFramework,
  entryFile,
});

const exampleFolderPathUrl = new URL(exampleFolderPath, import.meta.url);
const exampleFiles = await fs.readdir(exampleFolderPathUrl);

const scriptFiles = exampleFiles.filter(isScriptFile).map((file) => {
  return path.join(exampleFolderBaseUrl, file);
});
const styleFiles = exampleFiles.filter(isStyleFile).map((file) => {
  return path.join(exampleFolderBaseUrl, file);
});

const boilerPlateFramework = getBoilerPlateFramework({
  framework,
  useFunctionalReact,
  useVue3,
  useTypescript,
});
const boilerplatePath = `/example-runner/${library}-${boilerPlateFramework}-boilerplate/`;
---

{
  framework === "javascript" && (
    <JavascriptTemplate
      isDev={isDev}
      modifiedTimeMs={Date.now()}
      isExecuting={true}
      options={{
        enterprise: isEnterprise,
      }}
      scriptFiles={scriptFiles}
      styleFiles={styleFiles}
      indexFragment={indexHtml}
      appLocation={exampleFolderBaseUrl}
    />
  )
}
{
  framework === "react" && (
    <ReactTemplateLegacy
      isDev={isDev}
      modifiedTimeMs={Date.now()}
      isExecuting={true}
      options={{
        enterprise: isEnterprise,
      }}
      scriptFiles={scriptFiles}
      styleFiles={styleFiles}
      appLocation={exampleFolderBaseUrl}
      library={library}
      boilerplatePath={boilerplatePath}
      importType={importType}
      type={type}
      internalFramework={internalFramework}
    />
  )
}
