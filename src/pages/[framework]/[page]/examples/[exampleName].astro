---
import { getCollection } from "astro:content";
import fs from "node:fs/promises";
import path from "path";
import {
  getScriptFiles,
  getStyleFiles,
  getInternalFramework,
  getBoilerPlateFramework,
  getIsEnterprise,
  getDocExamplePages,
  getExampleFolderPath,
  getExampleBaseUrl,
  getEntryFileContents,
} from "../../../../utils/pages";
import JavascriptTemplate from "../../../../components/framework-templates/JavascriptTemplate.astro";
import ReactTemplateLegacy from "../../../../components/framework-templates/ReactTemplateLegacy";

const { framework, page, exampleName } = Astro.params;

// TODO: Create framework selector
const useFunctionalReact = false;
const useVue3 = false;
const useTypescript = false;

const internalFramework = getInternalFramework({
  framework,
  useFunctionalReact,
  useVue3,
  useTypescript,
});

const importType = "packages";
const library = "charts";
const type = "generated";
10;
const exampleFolderPath = getExampleFolderPath({
  page,
  exampleName,
  importType,
  internalFramework,
});
const exampleBaseUrl = getExampleBaseUrl({
  page,
  exampleName,
  importType,
  internalFramework,
});

export async function getStaticPaths() {
  const pages = await getCollection("docs");
  const examples = await getDocExamplePages({
    pages,
  });
  return examples;
}

const indexHtmlFile = path.join(exampleFolderPath, "index.html");
const indexHtmlPathUrl = new URL(indexHtmlFile, import.meta.url);
const indexHtml = await fs.readFile(indexHtmlPathUrl, "utf-8").catch(() => {});

const entryFile = await getEntryFileContents({
  page,
  exampleName,
  importType,
  framework,
  internalFramework,
});

const isEnterprise = getIsEnterprise({
  framework,
  internalFramework,
  entryFile,
});

const scriptFiles = await getScriptFiles({
  page,
  exampleName,
  importType,
  internalFramework,
});
const styleFiles = await getStyleFiles({
  page,
  exampleName,
  importType,
  internalFramework,
});

const boilerPlateFramework = getBoilerPlateFramework({
  framework,
  useFunctionalReact,
  useVue3,
  useTypescript,
});
const boilerplatePath = `/example-runner/${library}-${boilerPlateFramework}-boilerplate/`;
---

{
  framework === "javascript" && (
    <JavascriptTemplate
      modifiedTimeMs={Date.now()}
      isExecuting={true}
      options={{
        enterprise: isEnterprise,
      }}
      scriptFiles={scriptFiles}
      styleFiles={styleFiles}
      indexFragment={indexHtml}
      appLocation={exampleBaseUrl}
    />
  )
}
{
  framework === "react" && (
    <ReactTemplateLegacy
      modifiedTimeMs={Date.now()}
      isExecuting={true}
      options={{
        enterprise: isEnterprise,
      }}
      scriptFiles={scriptFiles}
      styleFiles={styleFiles}
      appLocation={exampleBaseUrl}
      library={library}
      boilerplatePath={boilerplatePath}
      importType={importType}
      type={type}
      internalFramework={internalFramework}
    />
  )
}
