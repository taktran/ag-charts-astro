---
import fs from "node:fs/promises";
import {
  isScriptFile,
  isStyleFile,
  getInternalFramework,
  getBoilerPlateFramework,
} from "../../../../utils/pages";
import JavascriptTemplate from "../../../../components/framework-templates/JavascriptTemplate.astro";
import ReactTemplateLegacy from "../../../../components/framework-templates/ReactTemplateLegacy";

const { framework, page, exampleName } = Astro.params;

// TODO: Create framework selector
const useFunctionalReact = false;
const useVue3 = false;
const useTypescript = false;

const internalFramework = getInternalFramework({
  framework,
  useFunctionalReact,
  useVue3,
  useTypescript,
});

const importType = "packages";
const library = "charts";
const type = "generated";

const srcRoot = "../../../../../public";
const exampleFolder = `examples/${page}/${exampleName}/${importType}/${internalFramework}`;
const exampleFolderBaseUrl = `/${exampleFolder}/`;

const exampleFolderPath = `${srcRoot}/${exampleFolder}`;

export async function getStaticPaths() {
  return [
    {
      params: {
        framework: "javascript",
        page: "heatmap-series",
        exampleName: "basic-heatmap",
      },
    },
    {
      params: {
        framework: "react",
        page: "heatmap-series",
        exampleName: "basic-heatmap",
      },
    },
  ];
}

const isDev = import.meta.env.DEV;

const indexHtmlFile = `${exampleFolderPath}/index.html`;
const indexHtmlPathUrl = new URL(indexHtmlFile, import.meta.url);
const indexHtml = await fs.readFile(indexHtmlPathUrl, "utf-8").catch(() => {});

const mainJsFile = `${exampleFolderPath}/main.js`;
const mainJsFileUrl = new URL(mainJsFile, import.meta.url);
const mainJs = await fs.readFile(mainJsFileUrl, "utf-8").catch(() => {});
const isEnterprise = mainJs?.includes("agChartsEnterprise"); // TODO: Find a better way to determine if an example is enterprise or not

const exampleFolderPathUrl = new URL(exampleFolderPath, import.meta.url);
const exampleFiles = await fs.readdir(exampleFolderPathUrl);

const scriptFiles = exampleFiles.filter(isScriptFile).map((file) => {
  return `${exampleFolderBaseUrl}${file}`;
});
const styleFiles = exampleFiles.filter(isStyleFile).map((file) => {
  return `${exampleFolderBaseUrl}${file}`;
});

const boilerPlateFramework = getBoilerPlateFramework({
  framework,
  useFunctionalReact,
  useVue3,
  useTypescript,
});
const boilerplatePath = `/example-runner/${library}-${boilerPlateFramework}-boilerplate/`;
---

{
  framework === "javascript" && (
    <JavascriptTemplate
      isDev={isDev}
      modifiedTimeMs={Date.now()}
      isExecuting={true}
      options={{
        enterprise: isEnterprise,
      }}
      scriptFiles={scriptFiles}
      styleFiles={styleFiles}
      indexFragment={indexHtml}
      appLocation={exampleFolderBaseUrl}
    />
  )
}

{
  framework === "react" && (
    <ReactTemplateLegacy
      isDev={isDev}
      library="charts"
      modifiedTimeMs={Date.now()}
      isExecuting={true}
      options={{
        enterprise: isEnterprise,
      }}
      scriptFiles={scriptFiles}
      styleFiles={styleFiles}
      indexFragment={indexHtml}
      appLocation={exampleFolderBaseUrl}
      internalFramework={internalFramework}
      boilerplatePath={boilerplatePath}
      importType={importType}
      type={type}
    />
  )
}
