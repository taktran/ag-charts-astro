---
import { getCollection } from "astro:content";
import {
  getScriptFiles,
  getStyleFiles,
  getInternalFramework,
  getBoilerPlateFramework,
  getIsEnterprise,
  getDocExamplePages,
  getExampleLocation,
} from "../../../../utils/pages";
import JavascriptTemplate from "../../../../components/framework-templates/JavascriptTemplate.astro";
import ReactTemplateLegacy from "../../../../components/framework-templates/ReactTemplateLegacy";
import { getGeneratedContents } from "../../../../features/examples-generator/examples-generator";
import { getFrameworkFromInternalFramework } from "../../../../features/examples-generator/file-utils";

const internalFramework = Astro.params.internalFramework!;
const page = Astro.params.page!;
const exampleName = Astro.params.exampleName!;

// TODO: Create framework selector
const useVue3 = false;
const useTypescript = false;

const framework = getFrameworkFromInternalFramework(internalFramework);

const importType = "packages";
const library = "charts";
const type = "generated";

export async function getStaticPaths() {
  const pages = await getCollection("docs");
  const examples = await getDocExamplePages({
    pages,
  });
  return examples;
}

const { files, entryFileName } = await getGeneratedContents({
  internalFramework,
  importType,
  page,
  exampleName,
});
const entryFile = files[entryFileName];
const indexHtml = files["index.html"];

const isEnterprise = getIsEnterprise({
  framework,
  internalFramework,
  entryFile,
});

const scriptFiles = await getScriptFiles({
  page,
  exampleName,
  importType,
  internalFramework,
});
const styleFiles = await getStyleFiles({
  page,
  exampleName,
  importType,
  internalFramework,
});

const boilerPlateFramework = getBoilerPlateFramework({
  framework,
  internalFramework,
  useVue3,
  useTypescript,
});
const boilerplatePath = `/example-runner/${library}-${boilerPlateFramework}-boilerplate/`;

const appLocation = getExampleLocation({
  internalFramework,
  page,
  exampleName,
});
---

{
  framework === "javascript" && (
    <JavascriptTemplate
      modifiedTimeMs={Date.now()}
      isExecuting={true}
      options={{
        enterprise: isEnterprise,
      }}
      scriptFiles={scriptFiles}
      styleFiles={styleFiles}
      indexFragment={indexHtml}
      appLocation={appLocation}
    />
  )
}
{
  framework === "react" && (
    <ReactTemplateLegacy
      modifiedTimeMs={Date.now()}
      isExecuting={true}
      options={{
        enterprise: isEnterprise,
      }}
      scriptFiles={scriptFiles}
      styleFiles={styleFiles}
      appLocation={appLocation}
      library={library}
      boilerplatePath={boilerplatePath}
      importType={importType}
      type={type}
      internalFramework={internalFramework}
    />
  )
}
