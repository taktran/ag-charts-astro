{"headerName":{"description":"/** The name to render in the column header. If not specified and field is specified, the field name will be used as the header name. */","type":{"returnType":"string"}},"headerValueGetter":{"description":"/** Function or expression. Gets the value for display in the header. */","type":{"returnType":"string | HeaderValueGetterFunc<TData, TValue>"}},"headerTooltip":{"description":"/** Tooltip for the column header */","type":{"returnType":"string"}},"headerClass":{"description":"/** CSS class to use for the header cell. Can be a string, array of strings, or function. */","type":{"returnType":"HeaderClass<TData, TValue>"}},"suppressHeaderKeyboardEvent":{"description":"/** Suppress the grid taking action for the relevant keyboard event when a header is focused. */","type":{"arguments":{"params":"SuppressHeaderKeyboardEventParams<TData, TValue>"},"returnType":"boolean"}},"columnGroupShow":{"description":"/** Whether to only show the column when the group is open / closed. If not set the column is always displayed as part of the group. */","type":{"returnType":"ColumnGroupShowType"}},"toolPanelClass":{"description":"/** CSS class to use for the tool panel cell. Can be a string, array of strings, or function. */","type":{"returnType":"ToolPanelClass<TData, TValue>"}},"suppressColumnsToolPanel":{"description":"/** Set to `true` if you do not want this column or group to appear in the Columns Tool Panel. Default: `false` */","type":{"returnType":"boolean"}},"suppressFiltersToolPanel":{"description":"/** Set to `true` if you do not want this column (filter) or group (filter group) to appear in the Filters Tool Panel. Default: `false` */","type":{"returnType":"boolean"}},"tooltipComponent":{"description":"/** Provide your own tooltip component for the column.\n    * See [Tooltip Component](https://www.ag-grid.com/javascript-data-grid/component-tooltip/) for framework specific implementation details.\n    */","type":{"returnType":"any"}},"tooltipComponentParams":{"description":"/** The params used to configure `tooltipComponent`. */","type":{"returnType":"any"}},"pivotKeys":{"description":"/** Never set this, it is used internally by grid when doing in-grid pivoting */","type":{"returnType":"string[]"}},"children":{"description":"/** A list containing a mix of columns and column groups. */","type":{"returnType":"(ColDef<TData> | ColGroupDef<TData>)[]"}},"groupId":{"description":"/** The unique ID to give the column. This is optional. If missing, a unique ID will be generated. This ID is used to identify the column group in the column API. */","type":{"returnType":"string"}},"openByDefault":{"description":"/** Set to `true` if this group should be opened by default. Default: `false` */","type":{"returnType":"boolean"}},"marryChildren":{"description":"/** Set to `true` to keep columns in this group beside each other in the grid. Moving the columns outside of the group (and hence breaking the group) is not allowed. Default: `false` */","type":{"returnType":"boolean"}},"suppressStickyLabel":{"description":"/** If `true` the label of the Column Group will not scroll alongside the grid to always remain visible. Default: `false`\n     */","type":{"returnType":"boolean"}},"headerGroupComponent":{"description":"/** The custom header group component to be used for rendering the component header. If none specified the default AG Grid is used.\n    * See [Header Group Component](https://www.ag-grid.com/javascript-data-grid/component-header/#header-group-components/) for framework specific implementation details.\n    */","type":{"returnType":"any"}},"headerGroupComponentParams":{"description":"/** The params used to configure the `headerGroupComponent`. */","type":{"returnType":"any"}},"colId":{"description":"/** The unique ID to give the column. This is optional. If missing, the ID will default to the field.\n     *  If both field and colId are missing, a unique ID will be generated.\n     *  This ID is used to identify the column in the API for sorting, filtering etc. */","type":{"returnType":"string"}},"field":{"description":"/** The field of the row object to get the cell's data from.\n     * Deep references into a row object is supported via dot notation, i.e `'address.firstLine'`.\n     */","type":{"returnType":"NestedFieldPaths<TData, TValue>"}},"type":{"description":"/** A comma separated string or array of strings containing `ColumnType` keys which can be used as a template for a column.\n     * This helps to reduce duplication of properties when you have a lot of common column properties.\n     */","type":{"returnType":"string | string[]"}},"cellDataType":{"description":"/** The data type of the cell values for this column.\n     * Can either infer the data type from the row data (`true` - the default behaviour),\n     * define a specific data type (`string`), or have no data type (`false`).\n     * \n     * If setting a specific data type (`string` value),\n     * this can either be one of the pre-defined data types\n     * `'text'`, `'number'`,  `'boolean'`,  `'date'`,  `'dateString'` or  `'object'`,\n     * or a custom data type that has been defined in the `dataTypeDefinitions` grid option.\n     *  \n     * Data type inference only works for the Client-Side Row Model, and requires non-null data.\n     * It will also not work if the `valueGetter`, `valueParser` or `refData` properties are defined,\n     * or if this column is a sparkline.\n     * \n     * Default: `true`\n     */","type":{"returnType":"boolean | string"}},"valueGetter":{"description":"/** Function or expression. Gets the value from your data for display. */","type":{"returnType":"string | ValueGetterFunc<TData, TValue>"}},"valueFormatter":{"description":"/** A function or expression to format a value, should return a string. Not used for CSV export or copy to clipboard, only for UI cell rendering. */","type":{"returnType":"string | ValueFormatterFunc<TData, TValue>"}},"refData":{"description":"/** Provided a reference data map to be used to map column values to their respective value from the map. */","type":{"returnType":"{ [key: string]: string; }"}},"keyCreator":{"description":"/** Function to return a string key for a value.\n     * This string is used for grouping, Set filtering, and searching within cell editor dropdowns.\n     * When filtering and searching the string is exposed to the user, so make sure to return a human-readable value. */","type":{"arguments":{"params":"KeyCreatorParams<TData, TValue>"},"returnType":"string"}},"equals":{"description":"/** Custom comparator for values, used by renderer to know if values have changed. Cells whose values have not changed don't get refreshed.\n     * By default the grid uses `===` which should work for most use cases.\n     */","type":{"arguments":{"valueA":"TValue | null | undefined","valueB":"TValue | null | undefined"},"returnType":"boolean"}},"tooltipField":{"description":"/** The field of the tooltip to apply to the cell. */","type":{"returnType":"NestedFieldPaths<TData>"}},"tooltipValueGetter":{"description":"/** Callback that should return the string to use for a tooltip, `tooltipField` takes precedence if set.\n     * If using a custom `tooltipComponent` you may return any custom value to be passed to your tooltip component.\n     */","type":{"arguments":{"params":"ITooltipParams<TData, TValue>"},"returnType":"string | any"}},"checkboxSelection":{"description":"/** Set to `true` (or return `true` from function) to render a selection checkbox in the column. Default: `false` */","type":{"returnType":"boolean | CheckboxSelectionCallback<TData, TValue>"}},"showDisabledCheckboxes":{"description":"/** Set to `true` to display a disabled checkbox when row is not selectable and checkboxes are enabled. Default: `false` */","type":{"returnType":"boolean"}},"icons":{"description":"/** Icons to use inside the column instead of the grid's default icons. Leave undefined to use defaults. */","type":{"returnType":"{ [key: string]: Function | string; }"}},"suppressNavigable":{"description":"/** Set to `true` if this column is not navigable (i.e. cannot be tabbed into), otherwise `false`.\n     * Can also be a callback function to have different rows navigable.\n     * Default: `false`\n     */","type":{"returnType":"boolean | SuppressNavigableCallback<TData, TValue>"}},"suppressKeyboardEvent":{"description":"/** Allows the user to suppress certain keyboard events in the grid cell. Default: `false` */","type":{"arguments":{"params":"SuppressKeyboardEventParams<TData, TValue>"},"returnType":"boolean"}},"suppressPaste":{"description":"/** Pasting is on by default as long as cells are editable (non-editable cells cannot be modified, even with a paste operation).\n     * Set to `true` turn paste operations off.\n     */","type":{"returnType":"boolean | SuppressPasteCallback<TData, TValue>"}},"suppressFillHandle":{"description":"/** Set to true to prevent the fillHandle from being rendered in any cell that belongs to this column */","type":{"returnType":"boolean"}},"hide":{"description":"/** Set to `true` for this column to be hidden. Default: `false` */","type":{"returnType":"boolean"}},"initialHide":{"description":"/** Same as `hide`, except only applied when creating a new column. Not applied when updating column definitions. */","type":{"returnType":"boolean"}},"lockVisible":{"description":"/** Set to `true` to block making column visible / hidden via the UI (API will still work). Default: `false` */","type":{"returnType":"boolean"}},"lockPosition":{"description":"/** Lock a column to position to `'left'` or`'right'` to always have this column displayed in that position. `true` is treated as `'left'` */","type":{"returnType":"boolean | 'left' | 'right'"}},"suppressMovable":{"description":"/** Set to `true` if you do not want this column to be movable via dragging. Default: `false` */","type":{"returnType":"boolean"}},"useValueFormatterForExport":{"description":"/** Set to true to format values using the column's `valueFormatter` when exporting data from the grid.\n     * This applies to CSV and Excel export, as well as clipboard operations and the fill handle.\n     * If custom handling is provided for the export operation, this property will be ignored.\n     * Default: `false`\n     */","type":{"returnType":"boolean"}},"editable":{"description":"/** Set to `true` if this column is editable, otherwise `false`. Can also be a function to have different rows editable. Default: `false` */","type":{"returnType":"boolean | EditableCallback<TData, TValue>"}},"valueSetter":{"description":"/** Function or expression. Sets the value into your data for saving. Return `true` if the data changed. */","type":{"returnType":"string | ValueSetterFunc<TData, TValue>"}},"valueParser":{"description":"/** Function or expression. Parses the value for saving. */","type":{"returnType":"string | ValueParserFunc<TData, TValue>"}},"cellEditor":{"description":"/** Provide your own cell editor component for this column's cells.\n    * See [Cell Editor](https://www.ag-grid.com/javascript-data-grid/component-cell-editor/) for framework specific implementation detail.\n    */","type":{"returnType":"any"}},"cellEditorParams":{"description":"/** Params to be passed to the `cellEditor` component. */","type":{"returnType":"any"}},"cellEditorSelector":{"description":"/** Callback to select which cell editor to be used for a given row within the same column. */","type":{"returnType":"CellEditorSelectorFunc<TData, TValue>"}},"singleClickEdit":{"description":"/** Set to `true` to have cells under this column enter edit mode after single click. Default: `false` */","type":{"returnType":"boolean"}},"cellEditorPopup":{"description":"/** Set to `true`, to have the cell editor appear in a popup.\n     */","type":{"returnType":"boolean"}},"cellEditorPopupPosition":{"description":"/** Set the position for the popup cell editor. Possible values are\n     *  - `over` Popup will be positioned over the cell\n     *  - `under` Popup will be positioned below the cell leaving the cell value visible.\n     *\n     * Default: `over`. */","type":{"returnType":"'over' | 'under'"}},"useValueParserForImport":{"description":"/** Set to true to parse values using the column's `valueParser` when importing data to the grid.\n     * This applies to clipboard operations and the fill handle.\n     * If custom handling is provided for the import operation, this property will be ignored.\n     * Default: `false`\n     */","type":{"returnType":"boolean"}},"onCellValueChanged":{"description":"/** Callback for after the value of a cell has changed, either due to editing or the application calling `api.setValue()`. */","type":{"arguments":{"event":"NewValueParams<TData, TValue>"},"returnType":"void"}},"onCellClicked":{"description":"/** Callback called when a cell is clicked. */","type":{"arguments":{"event":"CellClickedEvent<TData, TValue>"},"returnType":"void"}},"onCellDoubleClicked":{"description":"/** Callback called when a cell is double clicked. */","type":{"arguments":{"event":"CellDoubleClickedEvent<TData, TValue>"},"returnType":"void"}},"onCellContextMenu":{"description":"/** Callback called when a cell is right clicked. */","type":{"arguments":{"event":"CellContextMenuEvent<TData, TValue>"},"returnType":"void"}},"getQuickFilterText":{"description":"/** A function to tell the grid what Quick Filter text to use for this column if you don't want to use the default (which is calling `toString` on the value). */","type":{"arguments":{"params":"GetQuickFilterTextParams<TData, TValue>"},"returnType":"string"}},"filterValueGetter":{"description":"/** Function or expression. Gets the value for filtering purposes. */","type":{"returnType":"string | ValueGetterFunc<TData, TValue>"}},"floatingFilter":{"description":"/** Whether to display a floating filter for this column. Default: `false` */","type":{"returnType":"boolean"}},"wrapHeaderText":{"description":"/** If enabled then column header names that are too long for the column width will wrap onto the next line. Default `false` */","type":{"returnType":"boolean"}},"autoHeaderHeight":{"description":"/** If enabled then the column header row will automatically adjust height to accommodate the size of the header cell.\n    * This can be useful when using your own `headerComponent` or long header names in conjunction with `wrapHeaderText`.\n    * Default: `false`\n    */","type":{"returnType":"boolean"}},"headerComponent":{"description":"/** The custom header component to be used for rendering the component header. If none specified the default AG Grid header component is used.\n    * See [Header Component](https://www.ag-grid.com/javascript-data-grid/component-header/) for framework specific implementation detail.\n    */","type":{"returnType":"any"}},"headerComponentParams":{"description":"/** The parameters to be passed to the `headerComponent`. */","type":{"returnType":"any"}},"menuTabs":{"description":"/** Set to an array containing zero, one or many of the following options: `'filterMenuTab' | 'generalMenuTab' | 'columnsMenuTab'`.\n     * This is used to figure out which menu tabs are present and in which order the tabs are shown.\n     */","type":{"returnType":"ColumnMenuTab[]"}},"columnsMenuParams":{"description":"/** Params used to change the behaviour and appearance of the Columns Menu tab. */","type":{"returnType":"ColumnsMenuParams"}},"suppressMenu":{"description":"/** Set to `true` if no menu should be shown for this column header. Default: `false` */","type":{"returnType":"boolean"}},"headerCheckboxSelection":{"description":"/** If `true` or the callback returns `true`, a 'select all' checkbox will be put into the header. */","type":{"returnType":"boolean | HeaderCheckboxSelectionCallback<TData, TValue>"}},"headerCheckboxSelectionFilteredOnly":{"description":"/** If `true`, the header checkbox selection will only select filtered items. */","type":{"returnType":"boolean"}},"headerCheckboxSelectionCurrentPageOnly":{"description":"/** If `true`, the header checkbox selection will only select nodes on the current page. */","type":{"returnType":"boolean"}},"chartDataType":{"description":"/** Defines the chart data type that should be used for a column. */","type":{"returnType":"'category' | 'series' | 'time' | 'excluded'"}},"pinned":{"description":"/** Pin a column to one side: `right` or `left`. A value of `true` is converted to `'left'`. */","type":{"returnType":"boolean | 'left' | 'right' | null"}},"initialPinned":{"description":"/** Same as `pinned`, except only applied when creating a new column. Not applied when updating column definitions. */","type":{"returnType":"boolean | 'left' | 'right'"}},"lockPinned":{"description":"/** Set to true to block the user pinning the column, the column can only be pinned via definitions or API. Default: `false`  */","type":{"returnType":"boolean"}},"pivot":{"description":"/** Set to true to pivot by this column. */","type":{"returnType":"boolean"}},"initialPivot":{"description":"/** Same as `pivot`, except only applied when creating a new column. Not applied when updating column definitions. */","type":{"returnType":"boolean"}},"pivotIndex":{"description":"/** Set this in columns you want to pivot by.\n     * If only pivoting by one column, set this to any number (e.g. `0`).\n     * If pivoting by multiple columns, set this to where you want this column to be in the order of pivots (e.g. `0` for first, `1` for second, and so on).\n     */","type":{"returnType":"number | null"}},"initialPivotIndex":{"description":"/** Same as `pivotIndex`, except only applied when creating a new column. Not applied when updating column definitions. */","type":{"returnType":"number"}},"pivotComparator":{"description":"/** Comparator to use when ordering the pivot columns, when this column is used to pivot on.\n     * The values will always be strings, as the pivot service uses strings as keys for the pivot groups.\n     */","type":{"arguments":{"valueA":"string","valueB":"string"},"returnType":"number"}},"enablePivot":{"description":"/** Set to `true` if you want to be able to pivot by this column via the GUI. This will not block the API or properties being used to achieve pivot. Default: `false` */","type":{"returnType":"boolean"}},"cellStyle":{"description":"/** An object of css values / or function returning an object of css values for a particular cell. */","type":{"returnType":"CellStyle | CellStyleFunc<TData, TValue>"}},"cellClass":{"description":"/** Class to use for the cell. Can be string, array of strings, or function that returns a string or array of strings. */","type":{"returnType":"string | string[] | CellClassFunc<TData, TValue>"}},"cellClassRules":{"description":"/** Rules which can be applied to include certain CSS classes. */","type":{"returnType":"CellClassRules<TData, TValue>"}},"cellRenderer":{"description":"/** Provide your own cell Renderer component for this column's cells.\n    * See [Cell Renderer](https://www.ag-grid.com/javascript-data-grid/component-cell-renderer/) for framework specific implementation details.\n    */","type":{"returnType":"any"}},"cellRendererParams":{"description":"/** Params to be passed to the `cellRenderer` component. */","type":{"returnType":"any"}},"cellRendererSelector":{"description":"/** Callback to select which cell renderer to be used for a given row within the same column. */","type":{"returnType":"CellRendererSelectorFunc<TData, TValue>"}},"autoHeight":{"description":"/** Set to `true` to have the grid calculate the height of a row based on contents of this column. Default: `false` */","type":{"returnType":"boolean"}},"wrapText":{"description":"/** Set to `true` to have the text wrap inside the cell - typically used with `autoHeight`. Default: `false` */","type":{"returnType":"boolean"}},"enableCellChangeFlash":{"description":"/** Set to `true` to flash a cell when it's refreshed. Default: `false` */","type":{"returnType":"boolean"}},"suppressCellFlash":{"description":"/** Set to `true` to prevent this column from flashing on changes. Only applicable if cell flashing is turned on for the grid. Default: `false` */","type":{"returnType":"boolean"}},"rowDrag":{"description":"/** `boolean` or `Function`. Set to `true` (or return `true` from function) to allow row dragging. Default: `false` */","type":{"returnType":"boolean | RowDragCallback<TData, TValue>"}},"rowDragText":{"description":"/** A callback that should return a string to be displayed by the `rowDragComp` while dragging a row.\n     * If this callback is not set, the `rowDragText` callback in the `gridOptions` will be used and\n     * if there is no callback in the `gridOptions` the current cell value will be used.\n     */","type":{"arguments":{"params":"IRowDragItem","dragItemCount":"number"},"returnType":"string"}},"dndSource":{"description":"/** `boolean` or `Function`. Set to `true` (or return `true` from function) to allow dragging for native drag and drop. Default: `false` */","type":{"returnType":"boolean | DndSourceCallback<TData, TValue>"}},"dndSourceOnRowDrag":{"description":"/** Function to allow custom drag functionality for native drag and drop. */","type":{"arguments":{"params":"DndSourceOnRowDragParams<TData>"},"returnType":"void"}},"rowGroup":{"description":"/** Set to `true` to row group by this column. Default: `false` */","type":{"returnType":"boolean"}},"initialRowGroup":{"description":"/** Same as `rowGroup`, except only applied when creating a new column. Not applied when updating column definitions. */","type":{"returnType":"boolean"}},"rowGroupIndex":{"description":"/** Set this in columns you want to group by.\n     * If only grouping by one column, set this to any number (e.g. `0`).\n     * If grouping by multiple columns, set this to where you want this column to be in the group (e.g. `0` for first, `1` for second, and so on).\n     */","type":{"returnType":"number | null"}},"initialRowGroupIndex":{"description":"/** Same as `rowGroupIndex`, except only applied when creating a new column. Not applied when updating column definitions. */","type":{"returnType":"number"}},"enableRowGroup":{"description":"/** Set to `true` if you want to be able to row group by this column via the GUI.\n     * This will not block the API or properties being used to achieve row grouping.\n     * Default: `false`\n     */","type":{"returnType":"boolean"}},"enableValue":{"description":"/** Set to `true` if you want to be able to aggregate by this column via the GUI.\n     * This will not block the API or properties being used to achieve aggregation.\n     * Default: `false`\n     */","type":{"returnType":"boolean"}},"aggFunc":{"description":"/** Name of function to use for aggregation. In-built options are: `sum`, `min`, `max`, `count`, `avg`, `first`, `last`. Also accepts a custom aggregation name or an aggregation function. */","type":{"returnType":"string | IAggFunc<TData, TValue> | null"}},"initialAggFunc":{"description":"/** Same as `aggFunc`, except only applied when creating a new column. Not applied when updating column definitions. */","type":{"returnType":"string | IAggFunc<TData, TValue>"}},"defaultAggFunc":{"description":"/** The name of the aggregation function to use for this column when it is enabled via the GUI.\n     * Note that this does not immediately apply the aggregation function like `aggFunc`\n     * Default: `sum`\n     */","type":{"returnType":"string"}},"allowedAggFuncs":{"description":"/** Aggregation functions allowed on this column e.g. `['sum', 'avg']`.\n     * If missing, all installed functions are allowed.\n     * This will only restrict what the GUI allows a user to select, it does not impact when you set a function via the API. */","type":{"returnType":"string[]"}},"showRowGroup":{"description":"/** Set to true to have the grid place the values for the group into the cell, or put the name of a grouped column to just show that group. */","type":{"returnType":"string | boolean"}},"sortable":{"description":"/** Set to `true` to allow sorting on this column. Default: `false` */","type":{"returnType":"boolean"}},"sort":{"description":"/** If sorting by default, set it here. Set to `asc` or `desc`. */","type":{"returnType":"SortDirection"}},"initialSort":{"description":"/** Same as `sort`, except only applied when creating a new column. Not applied when updating column definitions. */","type":{"returnType":"SortDirection"}},"sortIndex":{"description":"/** If sorting more than one column by default, specifies order in which the sorting should be applied. */","type":{"returnType":"number | null"}},"initialSortIndex":{"description":"/** Same as `sortIndex`, except only applied when creating a new column. Not applied when updating column definitions. */","type":{"returnType":"number"}},"sortingOrder":{"description":"/**  Array defining the order in which sorting occurs (if sorting is enabled). An array with any of the following in any order `['asc','desc',null]` */","type":{"returnType":"(SortDirection)[]"}},"comparator":{"description":"/** Override the default sorting order by providing a custom sort comparator.\n     *\n     * - `valueA`, `valueB` are the values to compare.\n     * - `nodeA`,  `nodeB` are the corresponding RowNodes. Useful if additional details are required by the sort.\n     * - `isDescending` - `true` if sort direction is `desc`. Not to be used for inverting the return value as the grid already applies `asc` or `desc` ordering.\n     *\n     * Return:\n     *  - `0`  valueA is the same as valueB\n     *  - `> 0` Sort valueA after valueB\n     *  - `< 0` Sort valueA before valueB\n     */","type":{"arguments":{"valueA":"TValue | null | undefined","valueB":"TValue | null | undefined","nodeA":"IRowNode<TData>","nodeB":"IRowNode<TData>","isDescending":"boolean"},"returnType":"number"}},"unSortIcon":{"description":"/** Set to `true` if you want the unsorted icon to be shown when no sort is applied to this column. Default: `false` */","type":{"returnType":"boolean"}},"colSpan":{"description":"/** By default, each cell will take up the width of one column. You can change this behaviour to allow cells to span multiple columns. */","type":{"arguments":{"params":"ColSpanParams<TData, TValue>"},"returnType":"number"}},"rowSpan":{"description":"/** By default, each cell will take up the height of one row. You can change this behaviour to allow cells to span multiple rows. */","type":{"arguments":{"params":"RowSpanParams<TData, TValue>"},"returnType":"number"}},"width":{"description":"/** Initial width in pixels for the cell. */","type":{"returnType":"number"}},"initialWidth":{"description":"/** Same as `width`, except only applied when creating a new column. Not applied when updating column definitions. */","type":{"returnType":"number"}},"minWidth":{"description":"/** Minimum width in pixels for the cell. */","type":{"returnType":"number"}},"maxWidth":{"description":"/** Maximum width in pixels for the cell. */","type":{"returnType":"number"}},"flex":{"description":"/** Used instead of `width` when the goal is to fill the remaining empty space of the grid. */","type":{"returnType":"number"}},"initialFlex":{"description":"/** Same as `flex`, except only applied when creating a new column. Not applied when updating column definitions. */","type":{"returnType":"number"}},"resizable":{"description":"/** Set to `true` to allow this column should be resized. Default: `false` */","type":{"returnType":"boolean"}},"suppressSizeToFit":{"description":"/** Set to `true` if you want this column's width to be fixed during 'size to fit' operations. Default: `false` */","type":{"returnType":"boolean"}},"suppressAutoSize":{"description":"/** Set to `true` if you do not want this column to be auto-resizable by double clicking it's edge. Default: `false` */","type":{"returnType":"boolean"}},"pivotValueColumn":{"description":"/** Never set this, it is used internally by grid when doing in-grid pivoting */","type":{"returnType":"Column | null"}},"pivotTotalColumnIds":{"description":"/** Never set this, it is used internally by grid when doing in-grid pivoting */","type":{"returnType":"string[]"}},"suppressSpanHeaderHeight":{"description":"/** Set to `true` if you don't want the column header for this column to span the whole height of the header container. Default: `false` */","type":{"returnType":"boolean"}},"filter":{"description":"/** Filter component to use for this column.\n     * - Set to `true` to use the default filter.\n     * - Set to the name of a provided filter: `set`, `number`, `text`, `date`.\n     * - Set to a `IFilterComp`.\n     */","type":{"returnType":"any"}},"filterParams":{"description":"/** Params to be passed to the filter component specified in `filter`. */","type":{"returnType":"any"}},"floatingFilterComponent":{"description":"/** The custom component to be used for rendering the floating filter.\n     * If none is specified the default AG Grid is used.\n     */","type":{"returnType":"any"}},"floatingFilterComponentParams":{"description":"/** Params to be passed to `floatingFilterComponent`. */","type":{"returnType":"any"}}}