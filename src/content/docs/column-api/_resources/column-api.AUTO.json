{"sizeColumnsToFit":{"description":"/** Gets the grid to size the columns to the specified width in pixels, e.g. `sizeColumnsToFit(900)`. To have the grid fit the columns to the grid's width, use the Grid API `gridApi.sizeColumnsToFit()` instead. */","type":{"arguments":{"gridWidth":"number"},"returnType":"void"}},"setColumnGroupOpened":{"description":"/** Call this if you want to open or close a column group. */","type":{"arguments":{"group":"ProvidedColumnGroup | string","newValue":"boolean"},"returnType":"void"}},"getColumnGroup":{"description":"/** Returns the column group with the given name. */","type":{"arguments":{"name":"string","instanceId?":"number"},"returnType":"ColumnGroup | null"}},"getProvidedColumnGroup":{"description":"/** Returns the provided column group with the given name. */","type":{"arguments":{"name":"string"},"returnType":"ProvidedColumnGroup | null"}},"getDisplayNameForColumn":{"description":"/** Returns the display name for a column. Useful if you are doing your own header rendering and want the grid to work out if `headerValueGetter` is used, or if you are doing your own column management GUI, to know what to show as the column name. */","type":{"arguments":{"column":"Column","location":"string | null"},"returnType":"string"}},"getDisplayNameForColumnGroup":{"description":"/** Returns the display name for a column group (when grouping columns). */","type":{"arguments":{"columnGroup":"ColumnGroup","location":"string | null"},"returnType":"string"}},"getColumn":{"description":"/** Returns the column with the given `colKey`, which can either be the `colId` (a string) or the `colDef` (an object). */","type":{"arguments":{"key":"any"},"returnType":"Column | null"}},"getColumns":{"description":"/** Returns all the columns, regardless of visible or not. */","type":{"arguments":{},"returnType":"Column[] | null"}},"applyColumnState":{"description":"/** Applies the state of the columns from a previous state. Returns `false` if one or more columns could not be found. */","type":{"arguments":{"params":"ApplyColumnStateParams"},"returnType":"boolean"}},"getColumnState":{"description":"/** Gets the state of the columns. Typically used when saving column state. */","type":{"arguments":{},"returnType":"ColumnState[]"}},"resetColumnState":{"description":"/** Sets the state back to match the originally provided column definitions. */","type":{"arguments":{},"returnType":"void"}},"getColumnGroupState":{"description":"/** Gets the state of the column groups. Typically used when saving column group state. */","type":{"arguments":{},"returnType":"{ groupId: string, open: boolean }[]"}},"setColumnGroupState":{"description":"/** Sets the state of the column group state from a previous state. */","type":{"arguments":{"stateItems":"({ groupId: string; open: boolean; })[]"},"returnType":"void"}},"resetColumnGroupState":{"description":"/** Sets the state back to match the originally provided column definitions. */","type":{"arguments":{},"returnType":"void"}},"isPinning":{"description":"/** Returns `true` if pinning left or right, otherwise `false`. */","type":{"arguments":{},"returnType":"boolean"}},"isPinningLeft":{"description":"/** Returns `true` if pinning left, otherwise `false`. */","type":{"arguments":{},"returnType":"boolean"}},"isPinningRight":{"description":"/** Returns `true` if pinning right, otherwise `false`. */","type":{"arguments":{},"returnType":"boolean"}},"getDisplayedColAfter":{"description":"/** Returns the column to the right of the provided column, taking into consideration open / closed column groups and visible columns. This is useful if you need to know what column is beside yours e.g. if implementing your own cell navigation. */","type":{"arguments":{"col":"Column"},"returnType":"Column | null"}},"getDisplayedColBefore":{"description":"/** Same as `getVisibleColAfter` except gives column to the left. */","type":{"arguments":{"col":"Column"},"returnType":"Column | null"}},"setColumnVisible":{"description":"/** Sets the visibility of a column. Key can be the column ID or `Column` object. */","type":{"arguments":{"key":"string | Column","visible":"boolean"},"returnType":"void"}},"setColumnsVisible":{"description":"/** Same as `setColumnVisible`, but provide a list of column keys. */","type":{"arguments":{"keys":"(string | Column)[]","visible":"boolean"},"returnType":"void"}},"setColumnPinned":{"description":"/** Sets the column pinned / unpinned. Key can be the column ID, field, `ColDef` object or `Column` object. */","type":{"arguments":{"key":"string | Column","pinned":"ColumnPinnedType"},"returnType":"void"}},"setColumnsPinned":{"description":"/** Same as `setColumnPinned`, but provide a list of column keys. */","type":{"arguments":{"keys":"(string | Column)[]","pinned":"ColumnPinnedType"},"returnType":"void"}},"getAllGridColumns":{"description":"/** Returns all the grid columns, same as `getColumns()`, except\n     *\n     *  a) it has the order of the columns that are presented in the grid\n     *\n     *  b) it's after the 'pivot' step, so if pivoting, has the value columns for the pivot.\n     */","type":{"arguments":{},"returnType":"Column[]"}},"getDisplayedLeftColumns":{"description":"/** Same as `getAllDisplayedColumns` but just for the pinned left portion of the grid. */","type":{"arguments":{},"returnType":"Column[]"}},"getDisplayedCenterColumns":{"description":"/** Same as `getAllDisplayedColumns` but just for the center portion of the grid. */","type":{"arguments":{},"returnType":"Column[]"}},"getDisplayedRightColumns":{"description":"/** Same as `getAllDisplayedColumns` but just for the pinned right portion of the grid. */","type":{"arguments":{},"returnType":"Column[]"}},"getAllDisplayedColumns":{"description":"/** Returns all columns currently displayed (e.g. are visible and if in a group, the group is showing the columns) for the pinned left, centre and pinned right portions of the grid. */","type":{"arguments":{},"returnType":"Column[]"}},"getAllDisplayedVirtualColumns":{"description":"/** Same as `getAllGridColumns()`, except only returns rendered columns, i.e. columns that are not within the viewport and therefore not rendered, due to column virtualisation, are not displayed. */","type":{"arguments":{},"returnType":"Column[]"}},"moveColumn":{"description":"/** Moves a column to `toIndex`. The column is first removed, then added at the `toIndex` location, thus index locations will change to the right of the column after the removal. */","type":{"arguments":{"key":"string | Column","toIndex":"number"},"returnType":"void"}},"moveColumnByIndex":{"description":"/** Same as `moveColumn` but works on index locations. */","type":{"arguments":{"fromIndex":"number","toIndex":"number"},"returnType":"void"}},"moveColumns":{"description":"/** Same as `moveColumn` but works on list. */","type":{"arguments":{"columnsToMoveKeys":"(string | Column)[]","toIndex":"number"}}},"moveRowGroupColumn":{"description":"/** Move the column to a new position in the row grouping order. */","type":{"arguments":{"fromIndex":"number","toIndex":"number"},"returnType":"void"}},"setColumnAggFunc":{"description":"/** Sets the agg function for a column. `aggFunc` can be one of the built-in aggregations or a custom aggregation by name or direct function. */","type":{"arguments":{"key":"string | Column","aggFunc":"string | IAggFunc | null | undefined"},"returnType":"void"}},"setColumnWidth":{"description":"/** Sets the column width on a single column. The finished flag gets included in the resulting event and not used internally by the grid. The finished flag is intended for dragging, where a dragging action will produce many `columnWidth` events, so the consumer of events knows when it receives the last event in a stream. The finished parameter is optional, and defaults to `true`. */","type":{"arguments":{"key":"string | Column","newWidth":"number","finished":"boolean = true","source?":"ColumnEventType"},"returnType":"void"}},"setColumnWidths":{"description":"/** Sets the column widths on multiple columns. This method offers better performance than calling `setColumnWidth` multiple times. The finished flag gets included in the resulting event and not used internally by the grid. The finished flag is intended for dragging, where a dragging action will produce many `columnWidth` events, so the consumer of events knows when it receives the last event in a stream. The finished parameter is optional, and defaults to `true`. */","type":{"arguments":{"columnWidths":"{ key: string | Column; newWidth: number; }[]","finished":"boolean = true","source?":"ColumnEventType"},"returnType":"void"}},"setPivotMode":{"description":"/** Set the pivot mode. */","type":{"arguments":{"pivotMode":"boolean"},"returnType":"void"}},"isPivotMode":{"description":"/** Get the pivot mode. */","type":{"arguments":{},"returnType":"boolean"}},"getPivotResultColumn":{"description":"/** Returns the pivot result column for the given `pivotKeys` and `valueColId`. Useful to then call operations on the pivot column. */","type":{"arguments":{"pivotKeys":"string[]","valueColKey":"string | Column"},"returnType":"Column | null"}},"setValueColumns":{"description":"/** Set the value columns to the provided list of columns. */","type":{"arguments":{"colKeys":"(string | Column)[]"},"returnType":"void"}},"getValueColumns":{"description":"/** Get a list of the existing value columns. */","type":{"arguments":{},"returnType":"Column[]"}},"removeValueColumn":{"description":"/** Remove the given column from the existing set of value columns. */","type":{"arguments":{"colKey":"(string | Column)"},"returnType":"void"}},"removeValueColumns":{"description":"/** Like `removeValueColumn` but remove the given list of columns from the existing set of value columns. */","type":{"arguments":{"colKeys":"(string | Column)[]"},"returnType":"void"}},"addValueColumn":{"description":"/** Add the given column to the set of existing value columns. */","type":{"arguments":{"colKey":"(string | Column)"},"returnType":"void"}},"addValueColumns":{"description":"/** Like `addValueColumn` but add the given list of columns to the existing set of value columns. */","type":{"arguments":{"colKeys":"(string | Column)[]"},"returnType":"void"}},"setRowGroupColumns":{"description":"/** Set the row group columns. */","type":{"arguments":{"colKeys":"(string | Column)[]"},"returnType":"void"}},"removeRowGroupColumn":{"description":"/** Remove a column from the row groups. */","type":{"arguments":{"colKey":"string | Column"},"returnType":"void"}},"removeRowGroupColumns":{"description":"/** Same as `removeRowGroupColumn` but provide a list of columns. */","type":{"arguments":{"colKeys":"(string | Column)[]"},"returnType":"void"}},"addRowGroupColumn":{"description":"/** Add a column to the row groups. */","type":{"arguments":{"colKey":"string | Column"},"returnType":"void"}},"addRowGroupColumns":{"description":"/** Same as `addRowGroupColumn` but provide a list of columns. */","type":{"arguments":{"colKeys":"(string | Column)[]"},"returnType":"void"}},"getRowGroupColumns":{"description":"/** Get row group columns. */","type":{"arguments":{},"returnType":"Column[]"}},"setPivotColumns":{"description":"/** Set the pivot columns. */","type":{"arguments":{"colKeys":"(string | Column)[]"},"returnType":"void"}},"removePivotColumn":{"description":"/** Remove a pivot column. */","type":{"arguments":{"colKey":"string | Column"},"returnType":"void"}},"removePivotColumns":{"description":"/** Same as `removePivotColumn` but provide a list of columns. */","type":{"arguments":{"colKeys":"(string | Column)[]"},"returnType":"void"}},"addPivotColumn":{"description":"/** Add a pivot column. */","type":{"arguments":{"colKey":"string | Column"},"returnType":"void"}},"addPivotColumns":{"description":"/** Same as `addPivotColumn` but provide a list of columns. */","type":{"arguments":{"colKeys":"(string | Column)[]"},"returnType":"void"}},"getPivotColumns":{"description":"/** Get the pivot columns. */","type":{"arguments":{},"returnType":"Column[]"}},"getLeftDisplayedColumnGroups":{"description":"/** Same as `getAllDisplayedColumnGroups` but just for the pinned left portion of the grid. */","type":{"arguments":{},"returnType":"IHeaderColumn[]"}},"getCenterDisplayedColumnGroups":{"description":"/** Same as `getAllDisplayedColumnGroups` but just for the center portion of the grid. */","type":{"arguments":{},"returnType":"IHeaderColumn[]"}},"getRightDisplayedColumnGroups":{"description":"/** Same as `getAllDisplayedColumnGroups` but just for the pinned right portion of the grid. */","type":{"arguments":{},"returnType":"IHeaderColumn[]"}},"getAllDisplayedColumnGroups":{"description":"/** Returns all 'root' column headers. If you are not grouping columns, these return the columns. If you are grouping, these return the top level groups - you can navigate down through each one to get the other lower level headers and finally the columns at the bottom. */","type":{"arguments":{},"returnType":"IHeaderColumn[] | null"}},"autoSizeColumn":{"description":"/** Auto-sizes a column based on its contents. */","type":{"arguments":{"key":"string | Column","skipHeader?":"boolean"},"returnType":"void"}},"autoSizeColumns":{"description":"/** Same as `autoSizeColumn`, but provide a list of column keys. */","type":{"arguments":{"keys":"(string | Column)[]","skipHeader?":"boolean"},"returnType":"void"}},"autoSizeAllColumns":{"description":"/** Calls `autoSizeColumns` on all displayed columns. */","type":{"arguments":{"skipHeader?":"boolean"},"returnType":"void"}},"setPivotResultColumns":{"description":"/** Set the pivot result columns. */","type":{"arguments":{"colDefs":"(ColDef | ColGroupDef)[]"},"returnType":"void"}},"getPivotResultColumns":{"description":"/** Returns the grid's pivot result columns. */","type":{"arguments":{},"returnType":"Column[] | null"}},"getAllColumns":{"description":"/** @deprecated v28 Use `getColumns` instead */","type":{"arguments":{},"returnType":"Column[] | null"}},"getPrimaryColumns":{"description":"/** @deprecated v28 Use `getColumns` instead. */","type":{"arguments":{},"returnType":"Column[] | null"}},"getSecondaryColumns":{"description":"/** @deprecated v28 Use `getPivotResultColumns` instead. */","type":{"arguments":{},"returnType":"Column[] | null"}},"setSecondaryColumns":{"description":"/** @deprecated v28 Use `setPivotResultColumns` instead. */","type":{"arguments":{"colDefs":"(ColDef | ColGroupDef)[]"},"returnType":"void"}},"getSecondaryPivotColumn":{"description":"/** @deprecated v28 Use `getPivotResultColumn` instead */","type":{"arguments":{"pivotKeys":"string[]","valueColKey":"string | Column"},"returnType":"Column | null"}}}