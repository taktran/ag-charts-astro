{
    "_config_": {
        "codeSrc": "grid-api/grid-api.AUTO.json"
    },
    "columns": {
        "meta": {
            "displayName": "Column Definitions",
            "page": {
                "name": "Updating Column Definitions",
                "url": "/column-updating-definitions/"
            }
        },
        "getColumnDefs": {},
        "setColumnDefs": {},
        "setAutoGroupColumnDef": {},
        "setDefaultColDef": {},
        "sizeColumnsToFit": {
            "more": {
                "name": "Size Columns to Fit",
                "url": "/column-sizing/#size-columns-to-fit"
            }
        }
    },
    "pinned": {
        "meta": {
            "displayName": "Row Pinning",
            "page": {
                "name": "Row Pinning",
                "url": "/row-pinning/"
            }
        },
        "setPinnedTopRowData": {},
        "setPinnedBottomRowData": {},
        "getPinnedTopRowCount": {},
        "getPinnedBottomRowCount": {},
        "getPinnedTopRow": {},
        "getPinnedBottomRow": {}
    },
    "rowNodes": {
        "meta": {
            "displayName": "Row Nodes"
        },
        "getRowNode": {},
        "forEachNode": {
            "description": "Iterates through each node (row) in the grid and calls the callback for each node. This works similar to the `forEach` method on a JavaScript array. This is called for every node, ignoring any filtering or sorting applied within the grid. If using the [Infinite Row Model](/infinite-scrolling/), then this gets called for each page loaded in the page cache."
        },
        "forEachNodeAfterFilter": {},
        "forEachNodeAfterFilterAndSort": {},
        "forEachLeafNode": {}
    },
    "displayedRows": {
        "meta": {
            "displayName": "Row Displayed"
        },
        "getDisplayedRowAtIndex": {},
        "getDisplayedRowCount": {},
        "getFirstDisplayedRow": {},
        "getLastDisplayedRow": {}
    },
    "masterDetail": {
        "meta": {
            "displayName": "Master Detail",
            "page": {
                "name": "Master Detail",
                "url": "/master-detail/"
            }
        },
        "getDetailGridInfo": {},
        "forEachDetailGridInfo": {
            "more": {
                "name": "Accessing Detail Grids",
                "url": "/master-detail-grids/#accessing-detail-grids"
            }
        },
        "addDetailGridInfo": {
            "more": {
                "name": "Register Detail Grid",
                "url": "/master-detail-custom-detail/#registering-detail-grid"
            }
        },
        "removeDetailGridInfo": {
            "more": {
                "name": "Register Detail Grid",
                "url": "/master-detail-custom-detail/#registering-detail-grid"
            }
        }
    },
    "selection": {
        "meta": {
            "displayName": "Selection",
            "page": {
                "name": "Selection Overview",
                "url": "/selection-overview/"
            }
        },
        "selectAll": {},
        "deselectAll": {},
        "selectAllFiltered": {},
        "deselectAllFiltered": {},
        "selectAllOnCurrentPage": {},
        "deselectAllOnCurrentPage": {},
        "getSelectedNodes": {},
        "getSelectedRows": {},
        "setNodesSelected": {},
        "getBestCostNodeSelection": {},
        "getCellRanges": {},
        "addCellRange": {},
        "clearRangeSelection": {},
        "setSuppressRowClickSelection": {},
        "setEnableCellTextSelection": {
            "more": {
                "name": "Cell Text Selection",
                "url": "/selection-overview/#cell-text-selection"
            }
        },
        "setFillHandleDirection": {
            "more": {
                "name": "Fill Handle",
                "url": "/range-selection-fill-handle/"
            }
        }
    },
    "refresh": {
        "meta": {
            "displayName": "Refresh",
            "page": {
                "name": "View Refresh",
                "url": "/view-refresh/"
            }
        },
        "refreshCells": {
            "more": {
                "name": "Refresh Cells",
                "url": "/view-refresh/#refresh-cells"
            }
        },
        "redrawRows": {
            "more": {
                "name": "Redraw Rows",
                "url": "/view-refresh/#redraw-rows"
            }
        },
        "refreshHeader": {},
        "flashCells": {
            "more": {
                "name": "Flashing Cells",
                "url": "/flashing-cells/"
            }
        }
    },
    "sort": {
        "meta": {
            "displayName": "Sorting",
            "page": {
                "name": "Row Sorting",
                "url": "/row-sorting/"
            }
        },
        "onSortChanged": {},
        "setDeltaSort": {
            "more": {
                "name": "Delta sorting",
                "url": "/data-update-transactions/#delta-sorting"
            }
        }
    },
    "filter": {
        "meta": {
            "displayName": "Filtering",
            "page": {
                "name": "Filtering",
                "url": "/filtering-overview/"
            }
        },
        "getQuickFilter": {
            "more": {
                "name": "Checking the Quick Filter",
                "url": "/filter-quick/#checking-the-quick-filter"
            }
        },
        "setQuickFilter": {
            "more": {
                "name": "Setting the Quick Filter",
                "url": "/filter-quick/#setting-the-quick-filter"
            }
        },
        "resetQuickFilter": {
            "more": {
                "name": "Reset Cache Text",
                "url": "/filter-quick/#reset-cache-text"
            }
        },
        "isQuickFilterPresent": {
            "more": {
                "name": "Checking the Quick Filter",
                "url": "/filter-quick/#checking-the-quick-filter"
            }
        },
        "setIncludeHiddenColumnsInQuickFilter": {
            "more": {
                "name": "Include Hidden Columns",
                "url": "/filter-quick/#include-hidden-columns"
            }
        },
        "isColumnFilterPresent": {},
        "isAnyFilterPresent": {},
        "getFilterInstance": {
            "more": {
                "name": "Accessing Individual Filter Component Instances",
                "url": "/filter-api/#accessing-individual-filter-component-instances"
            }
        },
        "getFilterModel": {},
        "setFilterModel": {},
        "onFilterChanged": {},
        "destroyFilter": {}
    },
    "navigation": {
        "meta": {
            "displayName": "Keyboard Navigation",
            "page": {
                "name": "Keyboard Navigation",
                "url": "/keyboard-navigation/"
            }
        },
        "getFocusedCell": {},
        "setFocusedCell": {},
        "clearFocusedCell": {},
        "tabToNextCell": {},
        "tabToPreviousCell": {}
    },
    "editing": {
        "meta": {
            "displayName": "Editing",
            "page": {
                "name": "Cell Editing",
                "url": "/cell-editing/"
            }
        },
        "startEditingCell": {
            "more": {
                "name": "Editing API",
                "url": "/cell-editing-start-stop/#editing-api"
            }
        },
        "stopEditing": {
            "more": {
                "name": "Editing API",
                "url": "/cell-editing-start-stop/#editing-api"
            }
        },
        "getEditingCells": {
            "more": {
                "name": "Editing API",
                "url": "/cell-editing-start-stop/#editing-api"
            }
        },
        "getCellEditorInstances": {
            "more": {
                "name": "Cell Editor Instances",
                "url": "/component-cell-editor/#accessing-cell-editor-instances"
            },
            "interfaceHierarchyOverrides": {
                "exclude": [
                    "ICellEditor"
                ],
                "include": []
            }
        }
    },
    "export": {
        "meta": {
            "displayName": "Export",
            "page": {
                "name": "Export",
                "url": "/excel-export/"
            }
        },
        "exportDataAsCsv": {},
        "getDataAsCsv": {},
        "exportDataAsExcel": {},
        "getDataAsExcel": {},
        "getSheetDataForExcel": {},
        "exportMultipleSheetsAsExcel": {},
        "getMultipleSheetsAsExcel": {}
    },
    "events": {
        "meta": {
            "displayName": "Events"
        },
        "addEventListener": {},
        "addGlobalListener": {},
        "removeEventListener": {},
        "removeGlobalListener": {},
        "addRenderedRowListener": {}
    },
    "rowGroups": {
        "meta": {
            "displayName": "Row Grouping",
            "page": {
                "name": "Row Grouping",
                "url": "/grouping/"
            }
        },
        "expandAll": {},
        "collapseAll": {},
        "setRowNodeExpanded": {},
        "onGroupExpandedOrCollapsed": {}
    },
    "rowDrag": {
        "meta": {
            "displayName": "Row Drag and Drop",
            "page": {
                "name": "Row Dragging",
                "url": "/row-dragging/"
            }
        },
        "setSuppressRowDrag": {
            "more": {
                "name": "Suppress Row Drag",
                "url": "/row-dragging/#suppress-row-drag"
            }
        },
        "setSuppressMoveWhenRowDragging": {
            "more": {
                "name": "Suppress Move When Dragging",
                "url": "/row-dragging/#suppress-move-when-dragging"
            }
        },
        "addRowDropZone": {
            "more": {
                "name": "Row Dragging to an External DropZone",
                "url": "/row-dragging-to-external-dropzone/"
            },
            "interfaceHierarchyOverrides": {
                "exclude": [
                    "RowDragEnterEvent",
                    "RowDragLeaveEvent",
                    "RowDragMoveEvent",
                    "RowDragEndEvent"
                ],
                "include": []
            }
        },
        "removeRowDropZone": {
            "more": {
                "name": "Row Dragging to an External DropZone",
                "url": "/row-dragging-to-external-dropzone/"
            },
            "interfaceHierarchyOverrides": {
                "exclude": [
                    "RowDragEnterEvent",
                    "RowDragLeaveEvent",
                    "RowDragMoveEvent",
                    "RowDragEndEvent"
                ],
                "include": []
            }
        },
        "getRowDropZoneParams": {
            "more": {
                "name": "Row Dragging Between Grids",
                "url": "/row-dragging-to-grid/"
            },
            "interfaceHierarchyOverrides": {
                "exclude": [
                    "RowDragEnterEvent",
                    "RowDragLeaveEvent",
                    "RowDragMoveEvent",
                    "RowDragEndEvent"
                ],
                "include": []
            }
        }
    },
    "rendering": {
        "meta": {
            "displayName": "Rendering"
        },
        "getRenderedNodes": {},
        "getCellRendererInstances": {
            "more": {
                "name": "Cell Renderer Instances",
                "url": "/component-cell-renderer/#accessing-cell-renderer-instances"
            }
        },
        "getSizesForCurrentTheme": {},
        "resetRowHeights": {},
        "onRowHeightChanged": {}
    },
    "scrolling": {
        "meta": {
            "displayName": "Scrolling",
            "page": {
                "name": "Scrolling",
                "url": "/scrolling-scenarios/"
            }
        },
        "setAlwaysShowHorizontalScroll": {},
        "setAlwaysShowVerticalScroll": {},
        "ensureIndexVisible": {
            "more": {
                "name": "firstDataRendered event",
                "url": "/grid-events/#reference-miscellaneous-firstDataRendered"
            }
        },
        "ensureNodeVisible": {
            "more": {
                "name": "firstDataRendered event",
                "url": "/grid-events/#reference-miscellaneous-firstDataRendered"
            }
        },
        "ensureColumnVisible": {
            "more": {
                "name": "firstDataRendered event",
                "url": "/grid-events/#reference-miscellaneous-firstDataRendered"
            }
        },
        "getHorizontalPixelRange": {},
        "getVerticalPixelRange": {}
    },
    "infiniteScrolling": {
        "meta": {
            "displayName": "RowModel: Infinite",
            "page": {
                "name": "Infinite Row Model",
                "url": "/infinite-scrolling/"
            }
        },
        "setDatasource": {},
        "refreshInfiniteCache": {},
        "purgeInfiniteCache": {},
        "getInfiniteRowCount": {},
        "isLastRowIndexKnown": {},
        "setRowCount": {},
        "getCacheBlockState": {}
    },
    "viewportRowModel": {
        "meta": {
            "displayName": "RowModel: Viewport",
            "page": {
                "name": "Viewport Row Model",
                "url": "/viewport/"
            }
        },
        "setViewportDatasource": {}
    },
    "overlays": {
        "meta": {
            "displayName": "Overlays",
            "page": {
                "name": "Overlays",
                "url": "/overlays/"
            }
        },
        "showLoadingOverlay": {},
        "showNoRowsOverlay": {},
        "hideOverlay": {}
    },
    "clipboard": {
        "meta": {
            "displayName": "Clipboard",
            "page": {
                "name": "Clipboard",
                "url": "/clipboard/"
            }
        },
        "cutToClipboard": {},
        "copyToClipboard": {},
        "copySelectedRangeToClipboard": {},
        "copySelectedRangeDown": {
            "description": "Copies the selected range down, similar to <kbd>Ctrl</kbd>+<kbd>D</kbd> in Excel."
        },
        "copySelectedRowsToClipboard": {},
        "pasteFromClipboard": {}
    },
    "pagination": {
        "meta": {
            "displayName": "Pagination",
            "page": {
                "name": "Row Pagination",
                "url": "/row-pagination"
            }
        },
        "setPagination": {},
        "paginationIsLastPageFound": {
            "description": "Returns `true` when the last page is known; this will always be the case if you are using the [Client-Side Row Model](/client-side-model/) for pagination. Returns `false` when the last page is not known; this only happens when using [Infinite Row Model](/infinite-scrolling/)."
        },
        "paginationGetPageSize": {},
        "paginationSetPageSize": {},
        "paginationGetCurrentPage": {},
        "paginationGetTotalPages": {},
        "paginationGetRowCount": {},
        "paginationGoToPage": {},
        "paginationGoToNextPage": {},
        "paginationGoToPreviousPage": {},
        "paginationGoToFirstPage": {},
        "paginationGoToLastPage": {}
    },
    "headers": {
        "meta": {
            "displayName": "Column Headers",
            "page": {
                "name": "Column Headers",
                "url": "/column-headers/"
            }
        },
        "setHeaderHeight": {},
        "setGroupHeaderHeight": {},
        "setFloatingFiltersHeight": {},
        "setPivotHeaderHeight": {},
        "setPivotGroupHeaderHeight": {}
    },
    "UndoRedo": {
        "meta": {
            "displayName": "Undo / Redo",
            "page": {
                "name": "Undo/Redo Edits",
                "url": "/undo-redo-edits/"
            }
        },
        "undoCellEditing": {},
        "redoCellEditing": {},
        "getCurrentUndoSize": {},
        "getCurrentRedoSize": {}
    },
    "rowPivoting": {
        "meta": {
            "displayName": "Pivot and Aggregation",
            "description": "See [Pivot](/pivoting/) and [Aggregation](/aggregation/) for more information"
        },
        "addAggFunc": {},
        "addAggFuncs": {},
        "clearAggFuncs": {}
    },
    "accessories": {
        "meta": {
            "displayName": "Accessories"
        },
        "setPopupParent": {
            "more": {
                "name": "Popup Parent",
                "url": "/context-menu/#popup-parent"
            }
        },
        "showColumnMenuAfterButtonClick": {},
        "showColumnMenuAfterMouseClick": {},
        "hidePopupMenu": {
            "description": "Hides any visible [context menu](/context-menu/) or [column menu](/column-menu/)."
        },
        "setSideBar": {
            "interfaceHierarchyOverrides": {
                "exclude": [
                    "ToolPanelDef"
                ],
                "include": []
            },
            "more": {
                "name": "Side Bar",
                "url": "/side-bar/"
            }
        },
        "getSideBar": {
            "interfaceHierarchyOverrides": {
                "exclude": [
                    "ToolPanelDef"
                ],
                "include": []
            }
        },
        "setSideBarVisible": {},
        "isSideBarVisible": {},
        "setSideBarPosition": {},
        "openToolPanel": {
            "more": {
                "name": "Tool Panel",
                "url": "/tool-panel/"
            }
        },
        "closeToolPanel": {},
        "getOpenedToolPanel": {},
        "isToolPanelShowing": {},
        "refreshToolPanel": {},
        "getToolPanelInstance": {
            "more": {
                "name": "Tool Panel Expand / Collapse Column Groups",
                "url": "/tool-panel-columns/#expand--collapse-column-groups"
            }
        },
        "getStatusPanel": {
            "more": {
                "name": "Accessing Status Bar Panel Instances",
                "url": "/component-status-bar/#accessing-status-bar-panel-instances"
            },
            "interfaceHierarchyOverrides": {
                "exclude": [
                    "IAfterGuiAttachedParams",
                    "ContainerType",
                    "IStatusPanelParams"
                ],
                "include": []
            }
        }
    },
    "charts": {
        "meta": {
            "displayName": "Integrated Charts",
            "page": {
                "name": "Integrated Charts",
                "url": "/integrated-charts/"
            }
        },
        "createRangeChart": {
            "more": {
                "name": "Range Chart API",
                "url": "/integrated-charts-api-range-chart/"
            },
            "interfaceHierarchyOverrides": {
                "exclude": [
                    "CellRangeParams", "CreateRangeChartParams"
                ],
                "include": []
            }
        },
        "createPivotChart": {
            "more": {
                "name": "Pivot Chart API",
                "url": "/integrated-charts-api-pivot-chart/"
            }
        },
        "createCrossFilterChart": {
            "more": {
                "name": "Cross-filter API",
                "url": "/integrated-charts-api-cross-filter-chart/"
            },
            "interfaceHierarchyOverrides": {
                "exclude": [
                    "CellRangeParams"
                ],
                "include": []
            }
        },
        "updateChart": {
            "interfaceHierarchyOverrides": {
                "exclude": [
                    "CellRangeParams",
                    "CreateRangeChartParams",
                    "RowPinnedType",
                    "ChartType",
                    "SeriesChartType",
                    "ChartParamsCellRange"
                ],
                "include": []
            }
        },
        "getChartRef": {},
        "getChartModels": {
            "more": {
                "name": "Saving / Restoring Charts",
                "url": "/integrated-charts-api-save-restore-charts/"
            },
            "interfaceHierarchyOverrides": {
                "exclude": [
                    "CellRangeParams",
                    "ChartOptions",
                    "ChartModelType"
                ],
                "include": []
            }
        },
        "restoreChart": {
            "more": {
                "name": "Saving / Restoring Charts",
                "url": "/integrated-charts-api-save-restore-charts/"
            },
            "interfaceHierarchyOverrides": {
                "exclude": [
                    "CellRangeParams",
                    "ChartOptions",
                    "ChartModelType"
                ],
                "include": []
            }
        },
        "getChartImageDataURL": {
            "more": {
                "name": "Downloading Chart Image",
                "url": "/integrated-charts-api-downloading-image/"
            }
        },
        "downloadChart": {
            "more": {
                "name": "Downloading Chart Image",
                "url": "/integrated-charts-api-downloading-image/"
            }
        },
        "openChartToolPanel": {
            "more": {
                "name": "Open Chart Tool Panel",
                "url": "/integrated-charts-api-chart-tool-panel/"
            }
        },
        "closeChartToolPanel": {
            "more": {
                "name": "Close Chart Tool Panel",
                "url": "/integrated-charts-api-chart-tool-panel/"
            }
        }
    },
    "miscellaneous": {
        "meta": {
            "displayName": "Miscellaneous"
        },
        "getValue": {},
        "setDomLayout": {
            "more": {
                "name": "DOM Layout",
                "url": "/grid-size/#dom-layout"
            }
        },
        "destroy": {},
        "setGridAriaProperty": {
            "description": "Sets an ARIA property in the grid panel (element with `role=\"grid\"`), and removes an ARIA property when the value is null.<br /><br />Example:<br />`api.setGridAriaProperty('label', 'my grid')` will set `aria-label=\"my grid\"`.<br />`api.setGridAriaProperty('label', null)` will remove the `aria-label` attribute from the grid element."
        },
        "getGridId": {},
        "isAnimationFrameQueueEmpty": {}
    },
    "rowModels": {
        "meta": {
            "displayName": "RowModel",
            "page": {
                "name": "Row Model",
                "url": "/row-models/"
            }
        },
        "getModel": {}
    },
    "data": {
        "meta": {
            "displayName": "RowModel: Client-Side",
            "page": {
                "name": "Client-Side Row Model",
                "url": "/client-side-model/"
            }
        },
        "setRowData": {},
        "applyTransaction": {},
        "applyTransactionAsync": {},
        "flushAsyncTransactions": {},
        "refreshClientSideRowModel": {}
    },
    "serverSideRowModel": {
        "meta": {
            "displayName": "RowModel: Server-Side",
            "page": {
                "name": "Server-Side Row Model",
                "url": "/server-side-model/"
            }
        },
        "setServerSideDatasource": {},
        "setCacheBlockSize": {},
        "setRowCount": {},
        "refreshServerSide": {
            "more": {
                "name": "Purging Groups",
                "url": "/server-side-model-refresh/"
            }
        },
        "getServerSideGroupLevelState": {
            "more": {
                "name": "Store State",
                "url": "/server-side-model-grouping/#store-state--store-info"
            }
        },
        "retryServerSideLoads": {
            "more": {
                "name": "Retry Loads",
                "url": "/server-side-model-retry/"
            }
        },
        "applyServerSideTransaction": {
            "more": {
                "name": "Transactions",
                "url": "/server-side-model-updating-transactions/"
            }
        },
        "applyServerSideTransactionAsync": {
            "more": {
                "name": "Transactions",
                "url": "/server-side-model-updating-transactions/#asynchronous-updates"
            }
        },
        "getServerSideSelectionState": {
            "more": {
                "name": "Selection",
                "url": "/server-side-model-selection/#api-selection"
            }
        },
        "setServerSideSelectionState": {
            "more": {
                "name": "Selection",
                "url": "/server-side-model-selection/#api-selection"
            }
        },
        "getCacheBlockState": {
            "more": {
                "name": "Cache Block State",
                "url": "/server-side-model-configuration/#debug-info"
            }
        }
    }
}