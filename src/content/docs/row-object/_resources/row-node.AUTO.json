{"id":{"description":"/** Unique ID for the node. Either provided by the application, or generated by the grid if not. */","type":{"returnType":"string | undefined"}},"data":{"description":"/** The data as provided by the application.\n     * Can be `undefined` when using row grouping or during grid initialisation.\n     */","type":{"returnType":"TData | undefined"}},"displayed":{"description":"/** This will be `true` if it has a rowIndex assigned, otherwise `false`.\n     */","type":{"returnType":"boolean"}},"rowPinned":{"description":"/** Either `'top'` or `'bottom'` if row pinned, otherwise `undefined` or `null`. */","type":{"returnType":"RowPinnedType"}},"selectable":{"description":"/** Is this row selectable. */","type":{"returnType":"boolean"}},"rowHeight":{"description":"/** The height, in pixels, of this row. */","type":{"returnType":"number | null | undefined"}},"rowTop":{"description":"/** The row top position in pixels. */","type":{"returnType":"number | null"}},"group":{"description":"/** `true` if this node is a group node (i.e. it has children) */","type":{"returnType":"boolean | undefined"}},"firstChild":{"description":"/** `true` if this is the first child in this group. Changes when data is sorted. */","type":{"returnType":"boolean"}},"lastChild":{"description":"/** `true` if this is the last child in this group. Changes when data is sorted. */","type":{"returnType":"boolean"}},"childIndex":{"description":"/** Index of this row with respect to its parent when grouping. Changes when data is sorted. */","type":{"returnType":"number"}},"level":{"description":"/** How many levels this node is from the top when grouping. */","type":{"returnType":"number"}},"uiLevel":{"description":"/** How many levels this node is from the top when grouping in the UI (only different to `parent` when `groupRemoveSingleChildren=true`).*/","type":{"returnType":"number"}},"parent":{"description":"/** The parent node to this node, or empty if top level. */","type":{"returnType":"IRowNode<TData> | null"}},"stub":{"description":"/** Used by server-side row model. `true` if this row node is a stub. A stub is a placeholder row with loading icon while waiting from row to be loaded. */","type":{"returnType":"boolean"}},"failedLoad":{"description":"/** Used by server side row model, `true` if this row node failed a load. */","type":{"returnType":"boolean"}},"rowIndex":{"description":"/** The current row index. If the row is filtered out or in a collapsed group, this value will be `null`. */","type":{"returnType":"number | null"}},"quickFilterAggregateText":{"description":"/** If using quick filter, stores a string representation of the row for searching against. */","type":{"returnType":"string | null"}},"master":{"description":"/** `true` if this row is a master row, part of master / detail (ie row can be expanded to show detail). */","type":{"returnType":"boolean"}},"detail":{"description":"/** `true` if this row is a detail row, part of master / detail (ie child row of an expanded master row). */","type":{"returnType":"boolean"}},"field":{"description":"/** The field we are grouping on from our row data. */","type":{"returnType":"string | null"}},"key":{"description":"/** The key value for this group. */","type":{"returnType":"string | null"}},"groupData":{"description":"/** If using row grouping, contains the group values for this group. */","type":{"returnType":"{ [key: string]: any | null; } | null"}},"aggData":{"description":"/** If using row grouping and aggregation, contains the aggregation data. */","type":{"returnType":"any"}},"rowGroupColumn":{"description":"/** The row group column used for this group. */","type":{"returnType":"Column | null"}},"rowGroupIndex":{"description":"/** If doing in-memory (client-side) grouping, this is the index of the group column this cell is for.\n     * This will always be the same as the level, unless we are collapsing groups, i.e. `groupRemoveSingleChildren=true`.\n    */","type":{"returnType":"number | null"}},"expanded":{"description":"/** `true` if group is expanded, otherwise `false`. */","type":{"returnType":"boolean"}},"leafGroup":{"description":"/** `true` if this node is a group and the group is the bottom level in the tree. */","type":{"returnType":"boolean"}},"allLeafChildren":{"description":"/** All lowest level nodes beneath this node, no groups. */","type":{"returnType":"IRowNode<TData>[]"}},"allChildrenCount":{"description":"/** Number of children and grand children. */","type":{"returnType":"number | null"}},"childrenAfterGroup":{"description":"/** Children of this group. If multi levels of grouping, shows only immediate children. */","type":{"returnType":"IRowNode<TData>[] | null"}},"childrenAfterSort":{"description":"/** Sorted children of this group. */","type":{"returnType":"IRowNode<TData>[] | null"}},"childrenAfterFilter":{"description":"/** Filtered children of this group. */","type":{"returnType":"IRowNode<TData>[] | null"}},"footer":{"description":"/** `true` if row is a footer. Footers have `group = true` and `footer = true`. */","type":{"returnType":"boolean"}},"sibling":{"description":"/** If using footers, reference to the footer node for this group. */","type":{"returnType":"IRowNode<TData>"}},"setSelected":{"description":"/** Select (or deselect) the node.\n     * @param newValue -`true` for selection, `false` for deselection.\n     * @param clearSelection - If selecting, then passing `true` will select the node exclusively (i.e. NOT do multi select). If doing deselection, `clearSelection` has no impact. Default: `false`\n     * @param source - Source property that will appear in the `selectionChanged` event. Default: `'api'`\n     */","type":{"arguments":{"newValue":"boolean","clearSelection?":"boolean","source?":"SelectionEventSourceType"},"returnType":"void"}},"isSelected":{"description":"/** Returns:\n     * - `true` if node is selected.\n     * - `false` if the node isn't selected.\n     * - `undefined` if it's partially selected (group where not all children are selected). \n     */","type":{"arguments":{},"returnType":"boolean | undefined"}},"isRowPinned":{"description":"/** Returns:\n     * - `true` if node is either pinned to the `top` or `bottom`.\n     * - `false` if the node isn't pinned.\n     */","type":{"arguments":{},"returnType":"boolean"}},"isExpandable":{"description":"/** Returns:\n    * - `true` if the node can be expanded, i.e it is a group or master row.\n    * - `false` if the node cannot be expanded.\n    */","type":{"arguments":{},"returnType":"boolean"}},"setExpanded":{"description":"/** Set the expanded state of this rowNode. Pass `true` to expand and `false` to collapse.\n     */","type":{"arguments":{"expanded":"boolean","e?":"MouseEvent | KeyboardEvent"},"returnType":"void"}},"isFullWidthCell":{"description":"/** Returns:\n     * - `true` if the node is a full width cell.\n     * - `false` if the node is not a full width cell.\n     */","type":{"arguments":{},"returnType":"boolean"}},"isHovered":{"description":"/** Returns:\n     * - `true` if the node is currently hovered.\n     * - `false` if the node is not hovered.\n     */","type":{"arguments":{},"returnType":"boolean"}},"addEventListener":{"description":"/** Add an event listener. */","type":{"arguments":{"eventType":"RowNodeEventType","listener":"Function"},"returnType":"void"}},"removeEventListener":{"description":"/** Remove event listener. */","type":{"arguments":{"eventType":"RowNodeEventType","listener":"Function"},"returnType":"void"}},"resetQuickFilterAggregateText":{"description":"/** The first time `quickFilter` runs, the grid creates a one-off string representation of the row.\n     * This string is then used for the quick filter instead of hitting each column separately.\n     * When you edit, using grid editing, this string gets cleared down.\n     * However if you edit without using grid editing, you will need to clear this string down for the row to be updated with the new values.\n     * Otherwise new values will not work with the `quickFilter`.\n     */","type":{"arguments":{},"returnType":"void"}},"depthFirstSearch":{"description":"/** Perform a depth-first search of this node and its children. */","type":{"arguments":{"callback":"(rowNode: IRowNode<TData>) => void"},"returnType":"void"}},"setRowHeight":{"description":"/** Sets the row height.\n     * Call if you want to change the height initially assigned to the row.\n     * After calling, you must call `api.onRowHeightChanged()` so the grid knows it needs to work out the placement of the rows.\n     * @param rowHeight - new height of the row\n     * @param estimated - is this an estimated height. Default: `false`\n     */","type":{"arguments":{"rowHeight":"number | undefined | null","estimated?":"boolean"},"returnType":"void"}},"setData":{"description":"/** Replaces the data on the `rowNode`. When this method is called, the grid will refresh the entire rendered row if it is displayed.\n     */","type":{"arguments":{"data":"TData"},"returnType":"void"}},"updateData":{"description":"/** Updates the data on the `rowNode`. When this method is called, the grid will refresh the entire rendered row if it is displayed.\n     */","type":{"arguments":{"data":"TData"},"returnType":"void"}},"setDataValue":{"description":"/** Replaces the value on the `rowNode` for the specified column. When complete,\n     * the grid will refresh the rendered cell on the required row only.\n     * **Note**: This method only fires `onCellEditRequest` when the Grid is in **Read Only** mode.\n     *\n     * @param colKey The column where the value should be updated\n     * @param newValue The new value\n     * @param eventSource The source of the event\n     * @returns `true` if the value was changed, otherwise `false`.\n     */","type":{"arguments":{"colKey":"string | Column","newValue":"any","eventSource?":"string"},"returnType":"boolean"}},"getRoute":{"description":"/** Returns the route of the row node. If the Row Node is a group, it returns the route to that Row Node.\n     * If the Row Node is not a group, it returns `undefined`.\n     */","type":{"arguments":{},"returnType":"string[] | undefined"}}}